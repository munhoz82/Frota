// <auto-generated />
using System;
using FrotaTaxi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FrotaTaxi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250902221016_UpdateCorridaDataTypes")]
    partial class UpdateCorridaDataTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FrotaTaxi.Models.CentroCusto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("CentrosCusto");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Corrida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHoraAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnderecoFinal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EnderecoInicial")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("KmFinal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("KmInicial")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolicitanteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TipoTarifa")
                        .HasColumnType("int");

                    b.Property<int?>("TrechoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("SolicitanteId");

                    b.HasIndex("TrechoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Corridas");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Funcionalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Funcionalidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Controller = "Clientes",
                            Nome = "Clientes"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Index",
                            Controller = "Unidades",
                            Nome = "Unidades"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Controller = "Trechos",
                            Nome = "Trechos"
                        },
                        new
                        {
                            Id = 4,
                            Action = "Index",
                            Controller = "Corridas",
                            Nome = "Corridas"
                        },
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Controller = "Relatorios",
                            Nome = "Relatórios"
                        },
                        new
                        {
                            Id = 6,
                            Action = "Index",
                            Controller = "Perfis",
                            Nome = "Perfis"
                        },
                        new
                        {
                            Id = 7,
                            Action = "Index",
                            Controller = "Usuarios",
                            Nome = "Usuários"
                        });
                });

            modelBuilder.Entity("FrotaTaxi.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Perfis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Administrador"
                        });
                });

            modelBuilder.Entity("FrotaTaxi.Models.PerfilFuncionalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuncionalidadeId")
                        .HasColumnType("int");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<bool>("PodeConsultar")
                        .HasColumnType("bit");

                    b.Property<bool>("PodeEditar")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FuncionalidadeId");

                    b.HasIndex("PerfilId");

                    b.ToTable("PerfilFuncionalidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuncionalidadeId = 1,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 2,
                            FuncionalidadeId = 2,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 3,
                            FuncionalidadeId = 3,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 4,
                            FuncionalidadeId = 4,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 5,
                            FuncionalidadeId = 5,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 6,
                            FuncionalidadeId = 6,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        },
                        new
                        {
                            Id = 7,
                            FuncionalidadeId = 7,
                            PerfilId = 1,
                            PodeConsultar = true,
                            PodeEditar = true
                        });
                });

            modelBuilder.Entity("FrotaTaxi.Models.Trecho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("NomeTrecho")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrechoInicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrechoTermino")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Trechos");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Carro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("IMEI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PercentualCorrida")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@frotataxi.com",
                            Login = "admin",
                            Nome = "Administrador",
                            PerfilId = 1
                        });
                });

            modelBuilder.Entity("FrotaTaxi.Models.UsuarioAutorizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Funcional")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Telefone1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Telefone2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TipoSolicitante")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("UsuariosAutorizados");
                });

            modelBuilder.Entity("FrotaTaxi.Models.CentroCusto", b =>
                {
                    b.HasOne("FrotaTaxi.Models.Cliente", "Cliente")
                        .WithMany("CentrosCusto")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Corrida", b =>
                {
                    b.HasOne("FrotaTaxi.Models.CentroCusto", "CentroCusto")
                        .WithMany("Corridas")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FrotaTaxi.Models.Cliente", "Cliente")
                        .WithMany("Corridas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FrotaTaxi.Models.UsuarioAutorizado", "Solicitante")
                        .WithMany("Corridas")
                        .HasForeignKey("SolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FrotaTaxi.Models.Trecho", "Trecho")
                        .WithMany("Corridas")
                        .HasForeignKey("TrechoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FrotaTaxi.Models.Unidade", "Unidade")
                        .WithMany("Corridas")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CentroCusto");

                    b.Navigation("Cliente");

                    b.Navigation("Solicitante");

                    b.Navigation("Trecho");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("FrotaTaxi.Models.PerfilFuncionalidade", b =>
                {
                    b.HasOne("FrotaTaxi.Models.Funcionalidade", "Funcionalidade")
                        .WithMany("PerfilFuncionalidades")
                        .HasForeignKey("FuncionalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrotaTaxi.Models.Perfil", "Perfil")
                        .WithMany("PerfilFuncionalidades")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionalidade");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Trecho", b =>
                {
                    b.HasOne("FrotaTaxi.Models.Cliente", "Cliente")
                        .WithMany("Trechos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Usuario", b =>
                {
                    b.HasOne("FrotaTaxi.Models.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("FrotaTaxi.Models.UsuarioAutorizado", b =>
                {
                    b.HasOne("FrotaTaxi.Models.Cliente", "Cliente")
                        .WithMany("UsuariosAutorizados")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("FrotaTaxi.Models.CentroCusto", b =>
                {
                    b.Navigation("Corridas");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Cliente", b =>
                {
                    b.Navigation("CentrosCusto");

                    b.Navigation("Corridas");

                    b.Navigation("Trechos");

                    b.Navigation("UsuariosAutorizados");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Funcionalidade", b =>
                {
                    b.Navigation("PerfilFuncionalidades");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Perfil", b =>
                {
                    b.Navigation("PerfilFuncionalidades");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Trecho", b =>
                {
                    b.Navigation("Corridas");
                });

            modelBuilder.Entity("FrotaTaxi.Models.Unidade", b =>
                {
                    b.Navigation("Corridas");
                });

            modelBuilder.Entity("FrotaTaxi.Models.UsuarioAutorizado", b =>
                {
                    b.Navigation("Corridas");
                });
#pragma warning restore 612, 618
        }
    }
}
